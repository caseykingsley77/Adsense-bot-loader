from threading import Lock

# Global lock for thread-safe updates to global_ads_clicked
ads_click_lock = Lock()

def click_ads(driver, global_ads_clicked):
    """Click ads up to the maximum allowed."""
    if MAX_ADS_TO_CLICK == 0:
        print("Skipping ad clicks as MAX_ADS_TO_CLICK is set to 0.")
        return 0, global_ads_clicked

    ad_selectors = [
        "div .ads-ad", "ins.adsbygoogle", "[id^='div-gpt-ad']", ".gpt-ad", ".dfp-ad",
        "[class*='sponsored-content']", "[class*='promoted-content']", "[data-ad-slot]"
    ]
    ads_clicked = 0

    for selector in ad_selectors:
        # Check if the global limit has been reached
        if global_ads_clicked + ads_clicked >= MAX_ADS_TO_CLICK:
            break

        ads = driver.find_elements(By.CSS_SELECTOR, selector)
        for ad in ads:
            # Re-check the global limit before clicking each ad
            if global_ads_clicked + ads_clicked >= MAX_ADS_TO_CLICK:
                break

            try:
                driver.execute_script("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", ad)
                human_like_delay()
                ad.click()
                ads_clicked += 1
                print(f"Successfully clicked ad. Total ads clicked: {global_ads_clicked + ads_clicked}")
            except Exception as e:
                print(f"Error clicking ad: {e}")

    return ads_clicked, global_ads_clicked


def perform_actions(driver, global_ads_clicked):
    """Perform search and interaction tasks."""
    driver.get(BASE_URL)
    try:
        # Handle Google consent forms
        WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.TAG_NAME, "form")))
        consent_selectors = [
            "button[aria-label*='Accept' i]", "button[aria-label*='Agree' i]", "button[aria-label*='Consent' i]",
            "button#L2AGLb", "button#introAgreeButton"
        ]
        for selector in consent_selectors:
            buttons = driver.find_elements(By.CSS_SELECTOR, selector)
            for button in buttons:
                if button.is_displayed() and button.is_enabled():
                    button.click()
                    human_like_delay()
                    break
    except Exception as e:
        print(f"Error handling Google consent: {e}")

    try:
        # Enter search query
        search_box = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.NAME, "q")))
        search_box.clear()
        search_box.send_keys(SEARCH_QUERY + Keys.ENTER)
        human_like_delay()
        # Click on the specific search result
        result = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.PARTIAL_LINK_TEXT, SPECIFIC_SEARCH_RESULT_TEXT))
        )
        result.click()
        human_like_delay()
    except Exception as e:
        print(f"Error during search or result click: {e}")
        return global_ads_clicked

    # Scroll the first page gently in 20 sections
    scroll_page(driver, sections=20)

    # Open internal links
    for link_text in LINKS_TO_OPEN:
        for _ in range(TIMES_TO_OPEN_EACH_LINK):
            try:
                link = WebDriverWait(driver, 10).until(
                    EC.element_to_be_clickable((By.PARTIAL_LINK_TEXT, link_text))
                )
                driver.execute_script("window.open(arguments[0].href, '_blank');", link)
                human_like_delay()
            except Exception as e:
                print(f"Error opening link: {link_text}")

    # Interact with ads in each tab
    for handle in driver.window_handles[1:]:
        driver.switch_to.window(handle)
        scroll_page(driver, sections=20)
        close_cookie_notice(driver)

        # Thread-safe update of global_ads_clicked
        with ads_click_lock:
            if global_ads_clicked < MAX_ADS_TO_CLICK:
                ads_clicked, global_ads_clicked = click_ads(driver, global_ads_clicked)

        time.sleep(MINUTES_PER_PAGE * 60)
        scroll_page(driver, sections=20)

        if MAX_ADS_TO_CLICK > 0:
            click_random_link_in_ad_page(driver)

    # Scroll all pages again before exiting
    for handle in driver.window_handles[1:]:
        driver.switch_to.window(handle)
        scroll_page(driver, sections=20)

    print(f"Clicked on {global_ads_clicked} ads in total during this session.")
    return global_ads_clicked


def run_instance(proxy, global_ads_clicked):
    """Run the script with a specific proxy."""
    driver = create_driver(proxy)
    try:
        # Thread-safe update of global_ads_clicked
        with ads_click_lock:
            global_ads_clicked = perform_actions(driver, global_ads_clicked)
    except Exception as e:
        print(f"Error with proxy {proxy}: {e}")
    finally:
        driver.quit()
        human_like_delay(5, 10)
    return global_ads_clicked


# Main script
if __name__ == "__main__":
    proxies = fetch_proxies()
    if not proxies:
        print("No proxies available. Exiting.")
        exit()

    proxy_index = 0
    total_proxies = len(proxies)
    global_ads_clicked = 0

    while global_ads_clicked < MAX_ADS_TO_CLICK:
        if proxy_index >= total_proxies:
            print("Fetching new proxies...")
            proxies = fetch_proxies()
            if not proxies:
                print("No proxies available. Exiting.")
                exit()
            proxy_index = 0
            total_proxies = len(proxies)

        proxy = proxies[proxy_index]
        print(f"Using proxy: {proxy}")
        with ThreadPoolExecutor(max_workers=1) as executor:
            future = executor.submit(run_instance, proxy, global_ads_clicked)
            try:
                global_ads_clicked = future.result()
            except Exception as e:
                print(f"Error with proxy {proxy}: {e}")

        proxy_index += 1

    print("Script execution complete.")